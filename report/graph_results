#!/usr/bin/env python

import sys
import os
import re
import json
import glob
import matplotlib.pyplot as plt


# ------------------------------------------------------------
#
# script to graph results from this parameter study
#
# ------------------------------------------------------------




# ------------------------------------------------------------
#
# returns an array of values for the variable at each timestep
#
# ------------------------------------------------------------
def parse_resultfile(fname, varname):
    results = {}
    with open (fname, "r") as data:
        line = data.readline()
        while line:
            match = re.search(rf"^(\d+) {varname} (\d+\.\d+)", line)
            if match:
                if not match[1] in results:
                    # remember the value as a float
                    results[match[1]] = float(match[2])
            line = data.readline()

    return results

# ------------------------------------------------------------
#
# return a single total (time) which is the total of the
# maximum values for each time step across all files
#
# ------------------------------------------------------------
def get_data_value(directory, variable):
    datavalue = 0.0

    # print("get_data_value: {}".format(directory))
    largest = {}
    for result in glob.glob("{}/*".format(directory)):
        # print(result)
        results = parse_resultfile(result, variable)
        # print(results)
        for key in results:
            if key in largest:
                if results[key] > largest[key]:
                    largest[key] = results[key]
            else:
                largest[key] = results[key]

    for key in largest:
        datavalue += largest[key]
        # print("adding: {}".format(largest[key]))

    return datavalue

# ------------------------------------------------------------
#
# knowing how the directory names are constructed, return a
# directory name, using a list of parameters
#
# ------------------------------------------------------------
def read_parameters(fname):
    params = {}

    with open (fname) as json_file:
        params = json.load(json_file)

    return params

# ------------------------------------------------------------
#
# knowing how the directory names are constructed, return a
# directory name, using a list of parameters
#
# ------------------------------------------------------------
def get_dirname(numprocs, phi, theta, isize):
    return "results_proc{}_phi{}_theta{}_isize{}".format(numprocs, phi, theta, isize)


# ------------------------------------------------------------
#
# creates a plot 
#
# ------------------------------------------------------------
def plot(xvals, yvals, path, title, attrs):
    # print("plotting {} ...".format(path))
    # print(xvals)
    # print(yvals)
    plt.figure(figsize=attrs["size"])
    plt.plot(xvals, yvals)
    plt.ylabel(attrs["axes"]["y"]["label"])
    plt.xlabel(attrs["axes"]["x"]["label"])
    plt.title(title)
    plt.ylim(attrs["axes"]["y"]["lims"][0], attrs["axes"]["y"]["lims"][1])
    # plt.xticks(ticks)
    plt.savefig(path)
    plt.close()




# ------------------------------------------------------------
# ------------------------------------------------------------
#
# main
#
# ------------------------------------------------------------
# ------------------------------------------------------------


# check command line args
datafile = ""
if len(sys.argv) == 2:
    datafile = sys.argv[1]
else:
    print("ERROR: must provide one argument (graph json file)")
    exit()

graphs = []
with open (datafile) as json_file:
    jdata = json.load(json_file)
    graph_params = read_parameters(jdata["input"])

    results_dir = jdata["resdir"] 
    if not os.path.exists(results_dir):
        os.mkdir(results_dir)

    # holding this constant, so this is a no-op loop
    for np in graph_params["num_procs"]:

        # this loops over the final graphs 
        for isize in graph_params["image_size"]:
            yvals = [] 
            xvals = [] 
            points = {}
            resfile = ""
            for phi in graph_params["phi"]:
                for theta in graph_params["theta"]:
                    graphdir = get_dirname(np, phi, theta, isize)
                    resdir = "{}/{}".format(jdata["basedir"], graphdir) 
                    # save the values
                    num_images = int(phi)*int(theta)
                    if not num_images in xvals: 
                        points[num_images] = get_data_value(resdir, jdata["axes"]["y"]["variable"])
                        # print("{}: {} {}".format(graphdir, num_images, points[num_images]))
                        # yvals.append(get_data_value(resdir, jdata["axes"]["y"]["variable"]))
                        # xvals.append(int(phi)*int(theta))

            # print("image size: {}".format(isize))
            image = "{}.png".format(isize)
            path = "{}/{}".format(results_dir, image) 
            title = "Image Size: {}".format(isize)
            sorted_points = sorted(points.items())
            for p in sorted_points:
                xvals.append(p[0])
                yvals.append(p[1])
            plot(xvals, yvals, path, title, jdata)

            graphs.append(image)

# automatically write a report
if False:
    with open('{}/report.md'.format(results_dir), 'w') as report:
        for g in graphs:
            # print(g)
            report.write("![{}]({})\n".format(g, g))

    report.close()
